/**
 * RFQuack is a versatile RF-analysis tool that allows you to sniff, analyze, and
 * transmit data over the air.
 * 
 * Copyright (C) 2019 Trend Micro Incorporated
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

/*****************************************************************************
 * RFQuack configuration
 *****************************************************************************/

/* ID definition */
#define RFQUACK_UNIQ_ID "{{ RFQUACK_UNIQ_ID|default('RFQUACK') }}"
#define RFQUACK_TOPIC_PREFIX RFQUACK_UNIQ_ID

/* Transport configuration */
#define RFQUACK_SERIAL_BAUD_RATE {{ SERIAL_BAUD_RATE|default('115200') }}

{% if USE_MQTT is defined %}
#define RFQUACK_NETWORK_ESP32
#define RFQUACK_NETWORK_SSID "{{ WIFI_SSID }}"
#define RFQUACK_NETWORK_PASS "{{ WIFI_PASS }}"
#define RFQUACK_TRANSPORT_MQTT
#define RFQUACK_MQTT_BROKER_HOST "{{ MQTT_HOST }}"
#define RFQUACK_MQTT_BROKER_PORT {{ MQTT_PORT|default('1883') }}
  {% if MQTT_USER is defined and MQTT_PASS is defined %}
#define RFQUACK_MQTT_BROKER_USER "{{ MQTT_USER }}"
#define RFQUACK_MQTT_BROKER_PASS "{{ MQTT_PASS }}"
  {% elif MQTT_SSL is defined %}
#define RFQUACK_MQTT_BROKER_SSL
  {% endif %}
{% else %}
#define RFQUACK_TRANSPORT_SERIAL
{% endif %}

{% if GUESSING_MODULE is defined %}
#define RFQUACK_GUESSING_MODULE
{% endif %}
{% if FREQ_SCANNER_MODULE is defined %}
#define RFQUACK_FREQ_SCANNER_MODULE
{% endif %}
{% if MOUSE_JACK_MODULE is defined %}
#define RFQUACK_MOUSE_JACK_MODULE
{% endif %}
{% if PACKET_FILTER_MODULE is defined %}
#define RFQUACK_PACKET_FILTER_MODULE
{% endif %}
{% if PACKET_MOD_MODULE is defined %}
#define RFQUACK_PACKET_MOD_MODULE
{% endif %}
{% if PACKET_REPEAT_MODULE is defined %}
#define RFQUACK_PACKET_REPEAT_MODULE
{% endif %}
{% if ROLL_JAM_MODULE is defined %}
#define RFQUACK_PACKET_ROLL_JAM_MODULE
{% endif %}

{% if LOG_ENABLED is defined %}
#define RFQUACK_LOG_ENABLED    // Enable logging
{% endif %}

{% if DEV is defined %}
#define RFQUACK_DEV    // Enable dev mode (verbosity)
{% endif %}

{% if RADIOLIB_DEBUG is defined %}
#define RADIOLIB_DEBUG    // This may not be enough: try enabling also in RadioLib/src/BuildOpt.h
{% endif %}

/* Radio configuration */
#include <radio/drivers.h>

{% if ECRF is defined %}
SPIClass SPIH(HSPI);
SPISettings spiSettings(1000000, MSBFIRST, SPI_MODE0);
{% endif %}

// At least RadioA must be defined.
#define USE_RADIOA
typedef RFQ{{ RADIOA }} RadioA;
RadioA radioA = new Module(
  {{ RADIOA_CS }},  // CS
  {{ RADIOA_IRQ }}, // IRQ
  {{ RADIOA_RST|default('RADIOLIB_NC') }},  // RST or CE
  {{ RADIOA_GPIO|default('RADIOLIB_NC') }}  // extra GPIO

{% if ECRF is defined %}
  , SPIH, spiSettings
{% endif %}
  ); // CS, IRQ, CE/RST

{% if RADIOB is defined %}
// Optionally add RadioB.
#define USE_RADIOB
typedef RFQ{{ RADIOB }} RadioB;
RadioB radioB = new Module(
  {{ RADIOB_CS|default('RADIOLIB_NC') }},  // CS
  {{ RADIOB_IRQ|default('RADIOLIB_NC') }},  // IRQ
  {{ RADIOB_RST|default('RADIOLIB_NC') }},  // RST or CE
  {{ RADIOB_GPIO|default('RADIOLIB_NC') }}  // extra GPIO

{% if ECRF is defined %}
  , SPIH, spiSettings
{% endif %}
); // CS, IRQ, CE/RST
{% endif %}

{% if RADIOC is defined %}
// Optionally add RadioC.
#define USE_RADIOC
typedef RFQ{{ RADIOC }} RadioC;
RadioC radioC = new Module(
  {{ RADIOC_CS|default('RADIOLIB_NC') }},  // CS
  {{ RADIOC_IRQ|default('RADIOLIB_NC') }}, // IRQ
  {{ RADIOC_RST|default('RADIOLIB_NC') }},  // RST or CE
  {{ RADIOC_GPIO|default('RADIOLIB_NC') }}  // extra GPIO

{% if ECRF is defined %}
  , SPIH, spiSettings
{% endif %}
); // CS, IRQ, CE/RST
{% endif %}

{% if RADIOD is defined %}
// Optionally add RadioD.
#define USE_RADIOD
typedef RFQ{{ RADIOD }} RadioD;
RadioD radioD = new Module(
  {{ RADIOD_CS|default('RADIOLIB_NC') }}, // CS
  {{ RADIOD_IRQ|default('RADIOLIB_NC') }},  // IRQ
  {{ RADIOD_RST|default('RADIOLIB_NC') }},  // RST or CE
  {{ RADIOD_GPIO|default('RADIOLIB_NC') }}  // extra GPIO

{% if ECRF is defined %}
  , SPIH, spiSettings
{% endif %}
); // CS, IRQ, CE/RST
{% endif %}

{% if RADIOE is defined %}
// Optionally add RadioE.
#define USE_RADIOE
typedef RFQ{{ RADIOE }} RadioE;
RadioE radioE = new Module(
  {{ RADIOE_CS|default('RADIOLIB_NC') }},  // CS
  {{ RADIOE_IRQ|default('RADIOLIB_NC') }},  // IRQ
  {{ RADIOE_RST|default('RADIOLIB_NC') }},  // RST or CE
  {{ RADIOE_GPIO|default('RADIOLIB_NC') }}  // extra GPIO

{% if ECRF is defined %}
  , SPIH, spiSettings
{% endif %}
); // CS, IRQ, CE/RST
{% endif %}

/*****************************************************************************
 * /RFQuack configuration - DO NOT EDIT BELOW THIS LINE
 *****************************************************************************/
#include <rfquack.h>

void setup() {
  {% if ECRF is defined %}
  SPIH.begin();

  // reset Radio A 
  pinMode({{ RADIOA_CS }}, OUTPUT);
  digitalWrite({{ RADIOA_CS }}, 1);

{% if RADIOB is defined %}
  // reset Radio B
  pinMode({{ RADIOB_CS }}, OUTPUT);
  digitalWrite({{ RADIOB_CS }}, 1);
{% endif %}

  // TODO: reset Radio C
  {% endif %}

  rfquack_setup(
   &radioA
   {{ ', &radioB' if RADIOB is defined }}
   {{ ', &radioC' if RADIOC is defined }}
   {{ ', &radioD' if RADIOD is defined }}
   {{ ', &radioE' if RADIOE is defined }}
   );
}

void loop() {
  rfquack_loop();
}
